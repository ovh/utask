name: stepConditionTemplate
description: Step condition should be able to set the state to TO_RETRY
title_format: "[test] step condition task"
steps:
    stepOne:
        description: first step
        action:
            type: echo
            configuration:
                output:
                    foo: bar
        conditions:
            - type: check
              if:
                  - value: "{{.step.stepOne.output.foo}}"
                    operator: EQ
                    expected: bar
              then:
                  this: PRUNE
              message: First condition evals to true and is applied
            - type: check
              if:
                  - value: "{{.step.stepOne.output.foo}}"
                    operator: NE
                    expected: grault
              then:
                  this: TO_RETRY
              message: Second condition is also true, overrides the impact of the first
    stepTwo:
        description: a regexp condition is applied
        custom_states: [REGEXP_MATCH]
        action:
            type: echo
            configuration: { output: { email: "john.doe@example.com" } }
        conditions:
            - type: check
              if:
                  - value: "{{.step.this.output.email}}"
                    operator: regexp
                    expected: '[a-z\.]+@example\.com$'
              then:
                  this: REGEXP_MATCH
              message: email address belongs to example.com
    stepTwoBis:
        description: a NOTREGEXP condition is applied
        custom_states: [NOTREGEXP_MATCH]
        action:
            type: echo
            configuration: { output: { email: "foobar" } }
        conditions:
            - type: check
              if:
                  - value: "{{.step.this.output.email}}"
                    operator: NOTREGEXP
                    expected: '[a-z\.]+@example\.com$'
              then:
                  this: NOTREGEXP_MATCH
              message: provided input doesn't match an email address from example.com
    stepThree:
        dependencies: [stepTwo:ANY, stepTwoBis:ANY]
        description: multiple conditions changing state
        custom_states: [FOO, BAR, FUZZ]
        action:
            type: echo
            configuration: { output: { foo: bar } }
        conditions:
            - type: check
              if:
                  - value: "{{.step.this.output.foo}}"
                    operator: EQ
                    expected: barrrr
              then:
                  this: CLIENT_ERROR
              message: should not have matched
            - type: check
              if:
                  - value: "{{.step.this.output.foo}}"
                    operator: EQ
                    expected: bar
                  - value: "{{.step.this.state}}"
                    operator: EQ
                    expected: DONE
              then:
                  this: BAR
              message: matching is correct
            - type: check
              if:
                  - value: "{{.step.this.state}}"
                    operator: EQ
                    expected: BAR
              then:
                  this: FOO
              message: changed state matched correctly
    stepFour:
        dependencies: ["stepThree:DONE,FOO"]
        description: multiple state dependencies
        custom_states: [OK]
        action:
            type: echo
            configuration: { output: { foo: bar } }
        conditions:
            - type: check
              if:
                  - value: "{{.step.stepThree.state}}"
                    operator: EQ
                    expected: FOO
              then:
                  this: OK
              message: OK
    stepFive:
        dependencies: ["stepThree:DONE,BAR,FUZZ"]
        description: multiple state dependencies none matching
        custom_states: [OK]
        action:
            type: echo
            configuration: { output: { foo: bar } }
        conditions:
            - type: check
              if:
                  - value: "{{.step.stepThree.state}}"
                    operator: EQ
                    expected: FOO
              then:
                  this: OK
              message: OK
    stepSix:
        dependencies: [stepThree:ANY]
        description: a check against a list of acceptable values
        custom_states: [LIST_MATCH,LIST_NOMATCH]
        action:
            type: echo
            configuration:
                output:
                    items: 'foo,bar'
        conditions:
            - type: check
              if:
                  - expected: foo
                    operator: IN
                    value: '{{.step.this.output.items}}'
                    list_separator: ","
              then:
                  this: LIST_MATCH
              message: List contains matching value
            - type: check
              if:
                  - expected: '{{.step.this.state}}'
                    operator: EQ
                    value: 'LIST_MATCH'
                  - expected: baz
                    operator: NOTIN
                    value: '{{.step.this.output.items}}'
                    list_separator: ","
              then:
                  this: LIST_NOMATCH
              message: List doesn't contains matching value

    stepForeach:
        description: validate foreach child works as expected
        foreach: "[1,2,3,4]"
        custom_states: [FOO1, FOO2]
        conditions:
            - type: check
              if:
                  - value: '{{.iterator}}'
                    operator: EQ
                    expected: "1"
              then:
                  this: FOO1
            - type: check
              if:
                  - value: '{{.iterator}}'
                    operator: EQ
                    expected: "2"
              then:
                  this: FOO2
            - type: check
              if:
                  - value: '{{.iterator}}'
                    operator: EQ
                    expected: "3"
              then:
                  this: PRUNE
        action:
            type: echo
            configuration:
                output:
                    {
                        concat: "hello {{.iterator}}",
                    }
    stepForeachValidation:
        description: validate the dependant foreach step
        dependencies: [stepForeach]
        custom_states: [VALID]
        conditions:
            - type: check
              if:
                  - value: '{{ (index .step.stepForeach.children 0).state }}'
                    operator: EQ
                    expected: "FOO1"
                  - value: '{{ (index .step.stepForeach.children 1).state }}'
                    operator: EQ
                    expected: "FOO2"
                  - value: '{{ (index .step.stepForeach.children 2).state }}'
                    operator: EQ
                    expected: "DONE"
              then:
                  this: VALID
        action:
            type: echo
            configuration:
                output:
                    {
                        concat: "hello world",
                    }