// generated by jsonenums -type=OutputStrategy; DO NOT EDIT

package executor

import (
	"encoding/json"
	"fmt"
)

var (
	_OutputStrategyNameToValue = map[string]OutputStrategy{
		"OutputStrategynone":     OutputStrategynone,
		"OutputStrategymerge":    OutputStrategymerge,
		"OutputStrategytemplate": OutputStrategytemplate,
	}

	_OutputStrategyValueToName = map[OutputStrategy]string{
		OutputStrategynone:     "OutputStrategynone",
		OutputStrategymerge:    "OutputStrategymerge",
		OutputStrategytemplate: "OutputStrategytemplate",
	}
)

func init() {
	var v OutputStrategy
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_OutputStrategyNameToValue = map[string]OutputStrategy{
			interface{}(OutputStrategynone).(fmt.Stringer).String():     OutputStrategynone,
			interface{}(OutputStrategymerge).(fmt.Stringer).String():    OutputStrategymerge,
			interface{}(OutputStrategytemplate).(fmt.Stringer).String(): OutputStrategytemplate,
		}
	}
}

// MarshalJSON is generated so OutputStrategy satisfies json.Marshaler.
func (r OutputStrategy) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _OutputStrategyValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid OutputStrategy: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so OutputStrategy satisfies json.Unmarshaler.
func (r *OutputStrategy) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OutputStrategy should be a string, got %s", data)
	}
	v, ok := _OutputStrategyNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid OutputStrategy %q", s)
	}
	*r = v
	return nil
}
